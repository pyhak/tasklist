export class Container {
    static merge(container1: any, container2: any): any;
    constructor(...args: any[]);
    addRequest(constructor: any, id: any): any;
    addSingleton(constructor: any, id: any): any;
    addTransient(constructor: any, id: any): any;
    applyCustomMetadataReader(metadataReader: any): void;
    applyMiddleware(...args: any[]): void;
    bind(serviceIdentifier: any): any;
    bindTo(constructor: any, id: any): any;
    createChild(containerOptions: any): any;
    get(serviceIdentifier: any): any;
    getAll(serviceIdentifier: any): any;
    getAllNamed(serviceIdentifier: any, named: any): any;
    getAllTagged(serviceIdentifier: any, key: any, value: any): any;
    getNamed(serviceIdentifier: any, named: any): any;
    getTagged(serviceIdentifier: any, key: any, value: any): any;
    isBound(serviceIdentifier: any): any;
    isBoundNamed(serviceIdentifier: any, named: any): any;
    isBoundTagged(serviceIdentifier: any, key: any, value: any): any;
    load(...args: any[]): void;
    loadAsync(...args: any[]): any;
    rebind(serviceIdentifier: any): any;
    resolve(constructorFunction: any): any;
    restore(): void;
    snapshot(): void;
    unbind(serviceIdentifier: any): void;
    unbindAll(): void;
    unload(...args: any[]): void;
}
export function Inject(id: any): any;
export const cid: {};
export namespace container {
    function addRequest(constructor: any, id: any): any;
    function addSingleton(constructor: any, id: any): any;
    function addTransient(constructor: any, id: any): any;
    function applyCustomMetadataReader(metadataReader: any): void;
    function applyMiddleware(...args: any[]): void;
    function bind(serviceIdentifier: any): any;
    function bindTo(constructor: any, id: any): any;
    function createChild(containerOptions: any): any;
    function get(serviceIdentifier: any): any;
    function getAll(serviceIdentifier: any): any;
    function getAllNamed(serviceIdentifier: any, named: any): any;
    function getAllTagged(serviceIdentifier: any, key: any, value: any): any;
    function getNamed(serviceIdentifier: any, named: any): any;
    function getTagged(serviceIdentifier: any, key: any, value: any): any;
    const id: number;
    function isBound(serviceIdentifier: any): any;
    function isBoundNamed(serviceIdentifier: any, named: any): any;
    function isBoundTagged(serviceIdentifier: any, key: any, value: any): any;
    function load(...args: any[]): void;
    function loadAsync(...args: any[]): any;
    const options: {
        autoBindInjectable: boolean;
        defaultScope: string;
        skipBaseClassChecks: boolean;
    };
    const parent: {};
    function rebind(serviceIdentifier: any): any;
    function resolve(constructorFunction: any): any;
    function restore(): void;
    function snapshot(): void;
    function unbind(serviceIdentifier: any): void;
    function unbindAll(): void;
    function unload(...args: any[]): void;
}
export function inject(id: any): any;
export function injectable(customId: any): any;